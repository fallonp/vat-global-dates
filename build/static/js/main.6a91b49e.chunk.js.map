{"version":3,"sources":["DateRangeApp.jsx","App.js","serviceWorker.js","index.js"],"names":["DateRangeApp","useState","Date","dateRange","setDateRange","whatHappened","setWHatHappened","start","end","isLeapYear","year","daysBetween","Math","round","getTime","startLeap","getFullYear","endLeap","mondays","floor","getDay","useEffect","axios","get","getMonth","getDate","then","response","data","catch","error","console","key","shortid","generate","class","onChange","value","clearIcon","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wPAiFeA,EA1EM,WAAO,IAAD,EACSC,mBAAS,CAAC,IAAIC,KAAQ,IAAIA,OADnC,mBAClBC,EADkB,KACPC,EADO,OAEeH,mBAAS,IAFxB,mBAElBI,EAFkB,KAEJC,EAFI,mBAMJH,EANI,GAMlBI,EANkB,KAMXC,EANW,KAQnBC,EAAa,SAAAC,GAAI,OACrBA,EAAO,MAAQ,EAAIA,EAAO,MAAQ,EAAIA,EAAO,IAAM,GAE/CC,EAAcC,KAAKC,OAAOL,EAAIM,UAAYP,EAAMO,WANtC,OAOVC,EAAYN,EAAWF,EAAMS,eAAiB,MAAQ,KACtDC,EAAUR,EAAWD,EAAIQ,eAAiB,MAAQ,KAClDE,EAAUN,KAAKO,MAAMR,EAAc,IAAyB,IAAnBJ,EAAMa,SAAiB,EAAI,GAe1E,OAbAC,qBAAU,WACRC,IACGC,IADH,gCAE6BhB,EAAMiB,WAAa,EAFhD,YAEqDjB,EAAMkB,UAF3D,UAIGC,MAAK,SAAAC,GACJrB,EAAgBqB,EAASC,SAE1BC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,QAEjB,CAACvB,EAAOC,IAGT,6BACE,gCACE,yBAAKwB,IAAKC,IAAQC,WAAYC,MAAM,uBAApC,iCAIF,yBAAKA,MAAM,WACT,kBAAC,IAAD,CACEC,SAlCS,SAAAjC,GAAS,OAAIC,EAAaD,IAmCnCkC,MAAOlC,EACPmC,UAAW,OAEb,4CACiB,IACf,0BAAMH,MAAM,iBAAiBH,IAAKC,IAAQC,YACvCvB,IAGL,+CACoB,IAClB,0BAAMwB,MAAM,iBAAiBH,IAAKC,IAAQC,YACvCnB,IAGL,6CACkB,IAChB,0BAAMoB,MAAM,iBAAiBH,IAAKC,IAAQC,YACvCjB,IAGL,iDACsB,IACpB,0BAAMkB,MAAM,iBAAiBH,IAAKC,IAAQC,YACvChB,IAGL,uDAEE,0BAAMiB,MAAM,iBAAZ,IAA8B9B,OCtEzBkC,EAFH,kBAAM,kBAAC,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwB,a","file":"static/js/main.6a91b49e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './DateRangeApp.css';\r\nimport './animate.css';\r\nimport shortid from 'shortid';\r\nimport axios from 'axios';\r\nimport DateRangePicker from '@wojtekmaj/react-daterange-picker';\r\n\r\nconst DateRangeApp = () => {\r\n  const [dateRange, setDateRange] = useState([new Date(), new Date()]);\r\n  const [whatHappened, setWHatHappened] = useState('');\r\n\r\n  const onChange = dateRange => setDateRange(dateRange);\r\n  const one_day = 1000 * 60 * 60 * 24;\r\n  const [start, end] = dateRange;\r\n\r\n  const isLeapYear = year =>\r\n    year % 100 === 0 ? year % 400 === 0 : year % 4 === 0;\r\n\r\n  const daysBetween = Math.round((end.getTime() - start.getTime()) / one_day);\r\n  const startLeap = isLeapYear(start.getFullYear()) ? 'Yes' : 'No';\r\n  const endLeap = isLeapYear(end.getFullYear()) ? 'Yes' : 'No';\r\n  const mondays = Math.floor(daysBetween / 7) + (start.getDay() === 1 ? 1 : 0);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `http://numbersapi.com/${start.getMonth() + 1}/${start.getDate()}/date`,\r\n      )\r\n      .then(response => {\r\n        setWHatHappened(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }, [start, end]);\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <div key={shortid.generate()} class='animated rubberBand'>\r\n          VAT Global Date Range Picker\r\n        </div>\r\n      </header>\r\n      <div class='content'>\r\n        <DateRangePicker\r\n          onChange={onChange}\r\n          value={dateRange}\r\n          clearIcon={null}\r\n        />\r\n        <p>\r\n          Days Between -{' '}\r\n          <span class='animated flash' key={shortid.generate()}>\r\n            {daysBetween}\r\n          </span>\r\n        </p>\r\n        <p>\r\n          Start Leap Year -{' '}\r\n          <span class='animated flash' key={shortid.generate()}>\r\n            {startLeap}\r\n          </span>\r\n        </p>\r\n        <p>\r\n          End Leap Year -{' '}\r\n          <span class='animated flash' key={shortid.generate()}>\r\n            {endLeap}\r\n          </span>\r\n        </p>\r\n        <p>\r\n          Number of Mondays -{' '}\r\n          <span class='animated flash' key={shortid.generate()}>\r\n            {mondays}\r\n          </span>\r\n        </p>\r\n        <p>\r\n          What happened on this day\r\n          <span class='what-happened'> {whatHappened}</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default DateRangeApp;\r\n","import React from 'react';\nimport DateRangeApp from './DateRangeApp';\n\nconst App = () => <DateRangeApp />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}